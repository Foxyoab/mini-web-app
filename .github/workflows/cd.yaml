name: GitFlow CI/CD Pipeline

on:
  push:
    branches: 
      - main
      - 'release/*'
      - 'hotfix/*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - staging
          - production
      image_tag:
        description: 'Docker image tag to deploy'
        required: true
        type: string
        default: 'latest'

env:
  DOCKER_IMAGE: foxyoab/mini-web-app
  REGISTRY: docker.io

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || contains(github.ref, 'refs/heads/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run tests
        run: |
          echo "Running tests..."
          # Ajoutez ici vos commandes de test
          # npm test, pytest, etc.

  build-uat:
    name: Build UAT Image
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Generate version
        id: version
        run: |
          # Générer une version sémantique basée sur la date et le commit
          DATE=$(date +%Y.%m.%d)
          SHORT_SHA=${GITHUB_SHA::7}
          VERSION="$DATE-$SHORT_SHA"
          SEMVER_VERSION="0.1.0-uat.$DATE.$SHORT_SHA"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "semver=$SEMVER_VERSION" >> $GITHUB_OUTPUT
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push UAT image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:uat
            ${{ env.DOCKER_IMAGE }}:uat-${{ steps.version.outputs.version }}
            ${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.semver }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-dev:
    name: Build Development Image
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push development image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:dev
            ${{ env.DOCKER_IMAGE }}:dev-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-staging:
    name: Build Staging Image (Manual)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Generate version
        id: version
        run: |
          DATE=$(date +%Y.%m.%d)
          SHORT_SHA=${GITHUB_SHA::7}
          VERSION="$DATE-$SHORT_SHA"
          SEMVER_VERSION="0.1.0-staging.$DATE.$SHORT_SHA"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "semver=$SEMVER_VERSION" >> $GITHUB_OUTPUT
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push staging image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:staging
            ${{ env.DOCKER_IMAGE }}:staging-${{ steps.version.outputs.version }}
            ${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.semver }}
            ${{ env.DOCKER_IMAGE }}:${{ github.event.inputs.image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-production:
    name: Build Production Image (Manual)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Generate version
        id: version
        run: |
          DATE=$(date +%Y.%m.%d)
          SHORT_SHA=${GITHUB_SHA::7}
          VERSION="$DATE-$SHORT_SHA"
          SEMVER_VERSION="0.1.0-prod.$DATE.$SHORT_SHA"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "semver=$SEMVER_VERSION" >> $GITHUB_OUTPUT
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push production image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:prod-${{ steps.version.outputs.version }}
            ${{ env.DOCKER_IMAGE }}:${{ steps.version.outputs.semver }}
            ${{ env.DOCKER_IMAGE }}:${{ github.event.inputs.image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-hotfix:
    name: Build Hotfix Image
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/hotfix/')
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Extract hotfix version
        id: extract_version
        run: |
          HOTFIX_VERSION=${GITHUB_REF#refs/heads/hotfix/}
          echo "version=$HOTFIX_VERSION" >> $GITHUB_OUTPUT
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push hotfix image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:hotfix
            ${{ env.DOCKER_IMAGE }}:hotfix-${{ steps.extract_version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-release-tag:
    name: Build Release from Tag
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Extract tag version
        id: extract_version
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$TAG_VERSION" >> $GITHUB_OUTPUT
          echo "clean_version=${TAG_VERSION#v}" >> $GITHUB_OUTPUT
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push tagged release
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:${{ steps.extract_version.outputs.version }}
            ${{ env.DOCKER_IMAGE }}:${{ steps.extract_version.outputs.clean_version }}
            ${{ env.DOCKER_IMAGE }}:stable
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-uat:
    name: Deploy to UAT
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: build-uat
    environment: uat
    steps:
      - name: Deploy to UAT environment
        run: |
          echo "Deploying ${{ env.DOCKER_IMAGE }}:uat to UAT environment"
          echo "Automatic deployment after merge to main"
          # Ajoutez ici vos commandes de déploiement automatique
          # kubectl, docker-compose, etc.

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'
    needs: build-staging
    environment: staging
    steps:
      - name: Deploy to staging environment
        run: |
          echo "Deploying ${{ env.DOCKER_IMAGE }}:${{ github.event.inputs.image_tag }} to staging environment"
          echo "Manual deployment triggered for staging"
          # Ajoutez ici vos commandes de déploiement

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    needs: build-production
    environment: production
    steps:
      - name: Deploy to production environment
        run: |
          echo "Deploying ${{ env.DOCKER_IMAGE }}:${{ github.event.inputs.image_tag }} to production environment"
          echo "Manual deployment triggered for production"
          # Ajoutez ici vos commandes de déploiement

  cleanup:
    name: Cleanup old images
    runs-on: ubuntu-latest
    if: always()
    needs: [build-dev, build-uat, build-staging, build-production, build-hotfix, build-release-tag]
    steps:
      - name: Cleanup Docker cache
        run: |
          echo "Cleaning up old Docker images and cache"
          # Ajoutez ici des commandes pour nettoyer les anciennes images
